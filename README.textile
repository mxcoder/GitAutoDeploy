!http://mxcoder.github.com/GitAutoDeploy/images/flow.png!

h1. What is it?

(A fork of https://github.com/chekun/Bitbucket-Auto-Deploy, which forks https://github.com/logsol/Github-Auto-Deploy)

This is a small HTTP server written in python that allows you to update a cloned git project automatically on each push or pr-merge.
Right now, such project must be in GitHub or Bitbucket, but this is easily extensible to support any service.

h1. Usage

To set it up, do the following:
* Install python
* Copy the GitAutoDeploy.conf.json.example to GitAutoDeploy.conf.json. (This file will be gitignored)
* Enter the matching for your project(s) in the GitAutoDeploy.conf.json file
* Start the server by typing ```python GitAutoDeploy.py``` (to run it as a daemon add ```--daemon-mode```)
* Configure your POST hook on GitHub or Bitbucket
* You can send a GET request to this running server, you should see an error message.

h2. BitBucket

https://confluence.atlassian.com/display/BITBUCKET/POST+hook+management
https://confluence.atlassian.com/display/BITBUCKET/Pull+Request+POST+hook+management

h2. GitHub

https://developer.github.com/webhooks/

h1. How this works

When someone pushes changes into the remote repository, it sends a json file to the service hook url. 
It contains information about the repository that was updated.

All it really does is match the repository urls to your local repository paths in the config file, 
move there and run "git pull".

Additionally it runs a deploy bash command that you can add to the config file optionally.
Make sure that you start the server as the user that is allowed to pull from the github repository.

h1. Roadmap

* Authentication
* More configuration options
